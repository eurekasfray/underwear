<?php

namespace Underwear\Core;

class Kernel
{

    private $booted; // indicates that Kernel is has been booted. but why?
    
    const NAME = "";
    const VERSION_MAJOR = "0";
    const VERSION_MINOR = "1";
    const BUILD = "";
    const COMMIT = "";
    
    // Boot The Kernel

    public function boot()
    {        
        $this->booted = true;   
    }
    
    // Handle The Request
    
    public function handle(\Underwear\Component\HttpRequest $request)
    {
        // This paragraphs of code performs the handling of a request in an
        // effort to pass control over to an app controller. That is
        // the job of this class method.
        //
        // The handling of a request means to find the controller action to which
        // the URI path and request method (of the given request) is mapped.
        // In the route table, a URI path and request method is mapped directly
        // onto a controller. Therefore, the kernel asks the router to search
        // the route table for the controller that is mapped the given URI path
        // and request method. The router search its route table and returns its results. The kernel is ready to dispatch the controller; however, before attempting to dispatch anything, the kernel must first check to see if a controller was found or not. If a controller was found, the kernel dispatches the controller; and the response generated by controller is then captured and returned. However, in the case that a controller
        // was not found, some response is needed to be returned to the client. As a result,
        // a not-found response is generated and returned. (For now, this is how
        // nonexisting controllers are handled. I feel there is a need to improve
        // this, where we provide the user with the control what to display when
        // a controller is not found, or more so, what to do when a controller is
        // not found). However, The kernal has now done its job
        // of transferring control over to the app. But, 
        //
        // Once the app controller has finished its run, this class method returns
        // the HttpRequest generated by the controller back to its caller.
        
        $uriPath = $request->getPath();
        $method = $request->getMethod();
        $routeTable = (include APP_CONFIG_DIRECTORY . DIRECTORY_SEPARATOR . 'routing' . FILE_EXTENSION);
        $router = new \Underwear\Core\Router();
        
        $router->register($routeTable);
        $controller = $router->getController($uriPath,$method);
        
        if ($controller != null) {
            $response = $this->dispatch($controller);
        }
        else {
            $response = \Underwear\Component\HttpResponse::NotFound("");
        }
            
        return $response;
        
    }
    
    // Dispatch The Controller

    private function dispatch(\Underwear\Core\Controller $controller)
    {
        // Step 1: Load the controller class.
        // Step 2: Dispatches the controller.
        // Step 3: Get response returned by the distached controller.
        // Step 4: Return the response.
    
        \Underwear\Core\Loader::load( APP_CONTROLLER_DIRECTORY . DIRECTORY_SEPARATOR . $controller->getName() . FILE_EXTENSION );
        $response = $controller->run();
        
        return $response;
        
    }
    
    // Abort. Force shutdown the framework and stop script processing
    
    public function abort()
    {
        die();
    }
    
    // Shutdown The Kernel
    
    public function shutdown()
    {
        // What does this do, really?
        
        if ($this->isBooted()) {
            $this->booted = false;
            die();
        }
        
    }
    
    // Is The Kernel Booted?
    
    public function isBooted()
    {
        // This too! What does it do?
    
        if ($this->booted) {
            return true;
        }
        else {
            return false;
        }
    
    }
    
    public function getName()
    {
        return self::NAME;
    }
    
    public function getVersionString()
    {
        return self::VERSION_MAJOR . "." . self::VERSION_MINOR;
    }
    
    public function getVersionMajor()
    {
        return self::VERSION_MAJOR;
    }
    
    public function getVersionMinor()
    {
        return self::VERSION_MINOR;
    }
    
    public function getCommitString()
    {
        return self::COMMIT;
    }
    
    public function getBuildString()
    {
        return self::BUILD;
    }

}

?>
